{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js!/home/lxt/SupplyChain-master/iview-admin/node_modules/eslint-loader/index.js??ref--13-0!/home/lxt/SupplyChain-master/iview-admin/src/store/module/user.js","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/store/module/user.js","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/.babelrc","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { login, logout, getUserInfo as _getUserInfo, getMessage, getContentByMsgId as _getContentByMsgId, hasRead as _hasRead, removeReaded as _removeReaded, restoreTrash as _restoreTrash, getUnreadCount } from '@/api/user';\nimport { setToken as _setToken, getToken } from '@/libs/util';\nexport default {\n  state: {\n    userName: '',\n    userId: '',\n    avatarImgPath: '',\n    token: getToken(),\n    access: '',\n    hasGetInfo: false,\n    unreadCount: 0,\n    messageUnreadList: [],\n    messageReadedList: [],\n    messageTrashList: [],\n    messageContentStore: {}\n  },\n  mutations: {\n    setAvatar: function setAvatar(state, avatarPath) {\n      state.avatarImgPath = avatarPath;\n    },\n    setUserId: function setUserId(state, id) {\n      state.userId = id;\n    },\n    setUserName: function setUserName(state, name) {\n      state.userName = name;\n    },\n    setAccess: function setAccess(state, access) {\n      state.access = access;\n    },\n    setToken: function setToken(state, token) {\n      state.token = token;\n\n      _setToken(token);\n    },\n    setHasGetInfo: function setHasGetInfo(state, status) {\n      state.hasGetInfo = status;\n    },\n    setMessageCount: function setMessageCount(state, count) {\n      state.unreadCount = count;\n    },\n    setMessageUnreadList: function setMessageUnreadList(state, list) {\n      state.messageUnreadList = list;\n    },\n    setMessageReadedList: function setMessageReadedList(state, list) {\n      state.messageReadedList = list;\n    },\n    setMessageTrashList: function setMessageTrashList(state, list) {\n      state.messageTrashList = list;\n    },\n    updateMessageContentStore: function updateMessageContentStore(state, _ref) {\n      var msg_id = _ref.msg_id,\n          content = _ref.content;\n      state.messageContentStore[msg_id] = content;\n    },\n    moveMsg: function moveMsg(state, _ref2) {\n      var from = _ref2.from,\n          to = _ref2.to,\n          msg_id = _ref2.msg_id;\n      var index = state[from].findIndex(function (_) {\n        return _.msg_id === msg_id;\n      });\n      var msgItem = state[from].splice(index, 1)[0];\n      msgItem.loading = false;\n      state[to].unshift(msgItem);\n    }\n  },\n  getters: {\n    messageUnreadCount: function messageUnreadCount(state) {\n      return state.messageUnreadList.length;\n    },\n    messageReadedCount: function messageReadedCount(state) {\n      return state.messageReadedList.length;\n    },\n    messageTrashCount: function messageTrashCount(state) {\n      return state.messageTrashList.length;\n    }\n  },\n  actions: {\n    // 登录\n    handleLogin: function handleLogin(_ref3, _ref4) {\n      var commit = _ref3.commit;\n      var userName = _ref4.userName,\n          password = _ref4.password;\n      userName = userName.trim();\n      return new Promise(function (resolve, reject) {\n        login({\n          userName: userName,\n          password: password\n        }).then(function (res) {\n          var data = res.data;\n          commit('setToken', data.token);\n          resolve();\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    },\n    // 退出登录\n    handleLogOut: function handleLogOut(_ref5) {\n      var state = _ref5.state,\n          commit = _ref5.commit;\n      return new Promise(function (resolve, reject) {\n        logout(state.token).then(function () {\n          commit('setToken', '');\n          commit('setAccess', []);\n          resolve();\n        }).catch(function (err) {\n          reject(err);\n        }); // 如果你的退出登录无需请求接口，则可以直接使用下面三行代码而无需使用logout调用接口\n        // commit('setToken', '')\n        // commit('setAccess', [])\n        // resolve()\n      });\n    },\n    // 获取用户相关信息\n    getUserInfo: function getUserInfo(_ref6) {\n      var state = _ref6.state,\n          commit = _ref6.commit;\n      return new Promise(function (resolve, reject) {\n        try {\n          _getUserInfo(state.token).then(function (res) {\n            var data = res.data;\n            commit('setAvatar', data.avatar);\n            commit('setUserName', data.name);\n            commit('setUserId', data.user_id);\n            commit('setAccess', data.access);\n            commit('setHasGetInfo', true);\n            resolve(data);\n          }).catch(function (err) {\n            reject(err);\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    },\n    // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n    getUnreadMessageCount: function getUnreadMessageCount(_ref7) {\n      var state = _ref7.state,\n          commit = _ref7.commit;\n      getUnreadCount().then(function (res) {\n        var data = res.data;\n        commit('setMessageCount', data);\n      });\n    },\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    getMessageList: function getMessageList(_ref8) {\n      var state = _ref8.state,\n          commit = _ref8.commit;\n      return new Promise(function (resolve, reject) {\n        getMessage().then(function (res) {\n          var _res$data = res.data,\n              unread = _res$data.unread,\n              readed = _res$data.readed,\n              trash = _res$data.trash;\n          commit('setMessageUnreadList', unread.sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          commit('setMessageReadedList', readed.map(function (_) {\n            _.loading = false;\n            return _;\n          }).sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          commit('setMessageTrashList', trash.map(function (_) {\n            _.loading = false;\n            return _;\n          }).sort(function (a, b) {\n            return new Date(b.create_time) - new Date(a.create_time);\n          }));\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 根据当前点击的消息的id获取内容\n    getContentByMsgId: function getContentByMsgId(_ref9, _ref10) {\n      var state = _ref9.state,\n          commit = _ref9.commit;\n      var msg_id = _ref10.msg_id;\n      return new Promise(function (resolve, reject) {\n        var contentItem = state.messageContentStore[msg_id];\n\n        if (contentItem) {\n          resolve(contentItem);\n        } else {\n          _getContentByMsgId(msg_id).then(function (res) {\n            var content = res.data;\n            commit('updateMessageContentStore', {\n              msg_id: msg_id,\n              content: content\n            });\n            resolve(content);\n          });\n        }\n      });\n    },\n    // 把一个未读消息标记为已读\n    hasRead: function hasRead(_ref11, _ref12) {\n      var state = _ref11.state,\n          commit = _ref11.commit;\n      var msg_id = _ref12.msg_id;\n      return new Promise(function (resolve, reject) {\n        _hasRead(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageUnreadList',\n            to: 'messageReadedList',\n            msg_id: msg_id\n          });\n          commit('setMessageCount', state.unreadCount - 1);\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 删除一个已读消息到回收站\n    removeReaded: function removeReaded(_ref13, _ref14) {\n      var commit = _ref13.commit;\n      var msg_id = _ref14.msg_id;\n      return new Promise(function (resolve, reject) {\n        _removeReaded(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageReadedList',\n            to: 'messageTrashList',\n            msg_id: msg_id\n          });\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    // 还原一个已删除消息到已读消息\n    restoreTrash: function restoreTrash(_ref15, _ref16) {\n      var commit = _ref15.commit;\n      var msg_id = _ref16.msg_id;\n      return new Promise(function (resolve, reject) {\n        _restoreTrash(msg_id).then(function () {\n          commit('moveMsg', {\n            from: 'messageTrashList',\n            to: 'messageReadedList',\n            msg_id: msg_id\n          });\n          resolve();\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["/home/lxt/SupplyChain-master/iview-admin/src/store/module/user.js"],"names":["login","logout","getUserInfo","getMessage","getContentByMsgId","hasRead","removeReaded","restoreTrash","getUnreadCount","setToken","getToken","state","userName","userId","avatarImgPath","token","access","hasGetInfo","unreadCount","messageUnreadList","messageReadedList","messageTrashList","messageContentStore","mutations","setAvatar","avatarPath","setUserId","id","setUserName","name","setAccess","setHasGetInfo","status","setMessageCount","count","setMessageUnreadList","list","setMessageReadedList","setMessageTrashList","updateMessageContentStore","msg_id","content","moveMsg","from","to","index","findIndex","_","msgItem","splice","loading","unshift","getters","messageUnreadCount","length","messageReadedCount","messageTrashCount","actions","handleLogin","commit","password","trim","Promise","resolve","reject","then","res","data","catch","err","handleLogOut","avatar","user_id","error","getUnreadMessageCount","getMessageList","unread","readed","trash","sort","a","b","Date","create_time","map","contentItem"],"mappings":"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","sourcesContent":["import {\n  login,\n  logout,\n  getUserInfo,\n  getMessage,\n  getContentByMsgId,\n  hasRead,\n  removeReaded,\n  restoreTrash,\n  getUnreadCount\n} from '@/api/user'\nimport { setToken, getToken } from '@/libs/util'\n\nexport default {\n  state: {\n    userName: '',\n    userId: '',\n    avatarImgPath: '',\n    token: getToken(),\n    access: '',\n    hasGetInfo: false,\n    unreadCount: 0,\n    messageUnreadList: [],\n    messageReadedList: [],\n    messageTrashList: [],\n    messageContentStore: {}\n  },\n  mutations: {\n    setAvatar (state, avatarPath) {\n      state.avatarImgPath = avatarPath\n    },\n    setUserId (state, id) {\n      state.userId = id\n    },\n    setUserName (state, name) {\n      state.userName = name\n    },\n    setAccess (state, access) {\n      state.access = access\n    },\n    setToken (state, token) {\n      state.token = token\n      setToken(token)\n    },\n    setHasGetInfo (state, status) {\n      state.hasGetInfo = status\n    },\n    setMessageCount (state, count) {\n      state.unreadCount = count\n    },\n    setMessageUnreadList (state, list) {\n      state.messageUnreadList = list\n    },\n    setMessageReadedList (state, list) {\n      state.messageReadedList = list\n    },\n    setMessageTrashList (state, list) {\n      state.messageTrashList = list\n    },\n    updateMessageContentStore (state, { msg_id, content }) {\n      state.messageContentStore[msg_id] = content\n    },\n    moveMsg (state, { from, to, msg_id }) {\n      const index = state[from].findIndex(_ => _.msg_id === msg_id)\n      const msgItem = state[from].splice(index, 1)[0]\n      msgItem.loading = false\n      state[to].unshift(msgItem)\n    }\n  },\n  getters: {\n    messageUnreadCount: state => state.messageUnreadList.length,\n    messageReadedCount: state => state.messageReadedList.length,\n    messageTrashCount: state => state.messageTrashList.length\n  },\n  actions: {\n    // 登录\n    handleLogin ({ commit }, { userName, password }) {\n      userName = userName.trim()\n      return new Promise((resolve, reject) => {\n        login({\n          userName,\n          password\n        }).then(res => {\n          const data = res.data\n          commit('setToken', data.token)\n          resolve()\n        }).catch(err => {\n          reject(err)\n        })\n      })\n    },\n    // 退出登录\n    handleLogOut ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        logout(state.token).then(() => {\n          commit('setToken', '')\n          commit('setAccess', [])\n          resolve()\n        }).catch(err => {\n          reject(err)\n        })\n        // 如果你的退出登录无需请求接口，则可以直接使用下面三行代码而无需使用logout调用接口\n        // commit('setToken', '')\n        // commit('setAccess', [])\n        // resolve()\n      })\n    },\n    // 获取用户相关信息\n    getUserInfo ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        try {\n          getUserInfo(state.token).then(res => {\n            const data = res.data\n            commit('setAvatar', data.avatar)\n            commit('setUserName', data.name)\n            commit('setUserId', data.user_id)\n            commit('setAccess', data.access)\n            commit('setHasGetInfo', true)\n            resolve(data)\n          }).catch(err => {\n            reject(err)\n          })\n        } catch (error) {\n          reject(error)\n        }\n      })\n    },\n    // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n    getUnreadMessageCount ({ state, commit }) {\n      getUnreadCount().then(res => {\n        const { data } = res\n        commit('setMessageCount', data)\n      })\n    },\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    getMessageList ({ state, commit }) {\n      return new Promise((resolve, reject) => {\n        getMessage().then(res => {\n          const { unread, readed, trash } = res.data\n          commit('setMessageUnreadList', unread.sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          commit('setMessageReadedList', readed.map(_ => {\n            _.loading = false\n            return _\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          commit('setMessageTrashList', trash.map(_ => {\n            _.loading = false\n            return _\n          }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 根据当前点击的消息的id获取内容\n    getContentByMsgId ({ state, commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        let contentItem = state.messageContentStore[msg_id]\n        if (contentItem) {\n          resolve(contentItem)\n        } else {\n          getContentByMsgId(msg_id).then(res => {\n            const content = res.data\n            commit('updateMessageContentStore', { msg_id, content })\n            resolve(content)\n          })\n        }\n      })\n    },\n    // 把一个未读消息标记为已读\n    hasRead ({ state, commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        hasRead(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageUnreadList',\n            to: 'messageReadedList',\n            msg_id\n          })\n          commit('setMessageCount', state.unreadCount - 1)\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 删除一个已读消息到回收站\n    removeReaded ({ commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        removeReaded(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageReadedList',\n            to: 'messageTrashList',\n            msg_id\n          })\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    // 还原一个已删除消息到已读消息\n    restoreTrash ({ commit }, { msg_id }) {\n      return new Promise((resolve, reject) => {\n        restoreTrash(msg_id).then(() => {\n          commit('moveMsg', {\n            from: 'messageTrashList',\n            to: 'messageReadedList',\n            msg_id\n          })\n          resolve()\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    }\n  }\n}\n"]}]}