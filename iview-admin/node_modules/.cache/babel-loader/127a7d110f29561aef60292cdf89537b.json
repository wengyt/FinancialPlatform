{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js!/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lxt/SupplyChain-master/iview-admin/src/view/SupplyChain.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/view/SupplyChain.vue","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/.babelrc","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/lxt/SupplyChain-master/iview-admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"@/libs/api.request\";\nimport qs from 'qs'; // Vue.prototype.$qs = qs\n\nexport default {\n  data: function data() {\n    //那个中间的单据表\n    return {\n      columns: [\n      /*{\n        type: 'selection',\n        width: 60,\n        align: 'center'\n      },*/\n      {\n        title: '单据刷新原因',\n        align: 'center',\n        key: 'ReceiptType',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }, {\n        title: '单据ID',\n        align: 'center',\n        key: 'receiptID',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }, {\n        title: '发起者地址',\n        align: 'center',\n        key: 'fromAccount',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }, {\n        title: '收款人地址',\n        align: 'center',\n        key: 'toAccount',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }, {\n        title: '金额',\n        align: 'center',\n        key: 'amount',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }, {\n        title: '确认人地址',\n        align: 'center',\n        key: 'prover',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }, {\n        title: '是否已融资',\n        align: 'center',\n        key: 'financinged',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }, {\n        title: '是否已结算',\n        align: 'center',\n        key: 'settled',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      },\n      /*\n      {\n        title: '被转让记录',\n        align: 'center',\n        key: 'transferRecord',\n        // 过滤器\n        render: (h, params) => {\n          let temp = params.row[params.column.key]\n          if (typeof (temp) === 'undefined') {\n            return h('div', '0')\n          } else {\n            return h('div', params.row[params.column.key])\n          }\n        }\n      },\n      */\n      {\n        title: '剩余价值',\n        align: 'center',\n        key: 'leftValue',\n        // 过滤器\n        render: function render(h, params) {\n          var temp = params.row[params.column.key];\n\n          if (typeof temp === 'undefined') {\n            return h('div', '0');\n          } else {\n            return h('div', params.row[params.column.key]);\n          }\n        }\n      }],\n      // 表单校验对象\n      //3.0.2 AddContractRules\n      AddContractRules: {\n        fromAccount: [{\n          required: true,\n          message: '欠款人地址不能为空',\n          trigger: 'blur'\n        }],\n        toAccount: [{\n          required: true,\n          message: '转让地址（收款人）不能为空',\n          trigger: 'blur'\n        }],\n        prover: [{\n          required: true,\n          message: '见证方地址不能为空',\n          trigger: 'blur'\n        }],\n        amount: [{\n          required: true,\n          message: '金额不能为空',\n          trigger: 'blur'\n        }]\n      },\n      TransferRules: {\n        fromAccount: [{\n          required: true,\n          message: '此单据拥有者地址不能为空',\n          trigger: 'blur'\n        }],\n        toAccount: [{\n          required: true,\n          message: '转让地址不能为空',\n          trigger: 'blur'\n        }],\n        amount: [{\n          required: true,\n          message: '金额不能为空',\n          trigger: 'blur'\n        }],\n        receiptID: [{\n          required: true,\n          message: '单据ID不能为空',\n          trigger: 'blur'\n        }]\n      },\n      FinancingRules: {\n        receiptID: [{\n          required: true,\n          message: '单据ID不能为空',\n          trigger: 'blur'\n        }]\n      },\n      SettleRules: {\n        receiptID: [{\n          required: true,\n          message: '单据ID不能为空',\n          trigger: 'blur'\n        }]\n      },\n      page: {\n        // 系统用户翻页对象\n        total: 10,\n        currentPage: 1,\n        current: 1\n      },\n      isAddContract: false,\n      isTransfer: false,\n      isFinancing: false,\n      isSettle: false,\n      //isInfo: false,\n      AddContractForm: {},\n      TransferForm: {},\n      FinancingForm: {},\n      SettleForm: {},\n      //infoForm: {},\n      datalist: []\n    };\n  },\n  methods: {\n    //make Transfer   ccccccccccccccccccccccccccccccccc\n    //点击Transfer的确认交易后1.1\n    makeTransfer2: function () {\n      var _makeTransfer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(params) {\n        var self, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self = this;\n                result = {};\n                console.info('param ', params);\n                self.datalist.push(params);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function makeTransfer2(_x) {\n        return _makeTransfer.apply(this, arguments);\n      }\n\n      return makeTransfer2;\n    }(),\n    makeTransfer: function () {\n      var _makeTransfer2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(params) {\n        var self, result;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //直接全局变量给他是不行的\n                //要设置一个self中介\n                self = this;\n                result = {};\n                console.info('param ', params);\n                _context2.next = 5;\n                return axios.request({\n                  url: \"Transfer\",\n                  data: params,\n                  headers: {\n                    'Content-type': 'application/x-www-form-urlencoded'\n                  },\n                  method: \"post\"\n                }).then(function (res) {\n                  //得到res！？？？？\n                  console.info(res.data); //得到控制台的数据\n\n                  result = res.data;\n                  var retCode = result.output;\n                  self.datalist.push(params);\n                  /*\n                  if(retCode[0] != \"0\") {\n                      }\n                      else {\n                          self.datalist.push(params)\n                          console.info('333',result.output)\n                          return 1\n                      }\n                      */\n\n                  var form = {};\n                  form.ReceiptType = \"transfer\"; //!!!!\n\n                  form.receiptID = self.datalist.length + 1;\n                  form.fromAccount = this.AddContractForm.fromAccount;\n                  form.toAccount = this.AddContractForm.toAccount;\n                  form.amount = this.AddContractForm.amount;\n                  form.prover = 0;\n                  form.financinged = 0;\n                  form.settled = 0;\n                  form.transferRecord = [];\n                  form.leftValue = this.AddContractForm.amount;\n                  self.datalist.push(form); //let flag = false\n\n                  var form1 = {};\n                  form1.ReceiptType = \"fresh\"; //!!!!\n\n                  form1.receiptID = self.datalist.length + 1;\n                  form1.fromAccount = self.datalist[this.AddContractForm.receiptID - 1].fromAccount;\n                  form1.toAccount = self.datalist[this.AddContractForm.receiptID - 1].toAccount;\n                  form1.amount = self.datalist[this.AddContractForm.receiptID - 1].amount;\n                  form1.prover = self.datalist[this.AddContractForm.receiptID - 1].prover;\n                  form1.financinged = 0;\n                  form1.settled = 0;\n                  form1.transferRecord = self.datalist[this.AddContractForm.receiptID - 1].transferRecord.push(form.receiptID);\n                  form1.leftValue = self.datalist[this.AddContractForm.receiptID - 1].amount - this.AddContractForm.amount;\n                  self.datalist.push(form1);\n                  /*\n                  if(flag == true){\n                    self.datalist.push(form)\n                  }*/\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function makeTransfer(_x2) {\n        return _makeTransfer2.apply(this, arguments);\n      }\n\n      return makeTransfer;\n    }(),\n    //5.0\n    makeAddContract: function () {\n      var _makeAddContract = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(params) {\n        var self, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                //直接全局变量给他是不行的\n                //要设置一个self中介\n                self = this;\n                result = {}; //   let da = {\n                //     contractName: param,\n                //   }\n\n                console.info('param ', params);\n                _context3.next = 5;\n                return axios.request({\n                  url: \"AddContract\",\n                  data: params,\n                  headers: {\n                    'Content-type': 'application/x-www-form-urlencoded'\n                  },\n                  method: \"post\"\n                }).then(function (res) {\n                  console.info(res.data);\n                  result = res.data;\n                  var retCode = result.output; //发起新合同失败  这部分独有\n\n                  if (retCode = 0) {} else {\n                    self.datalist.push(params);\n                    /*\n                    let form = {}\n                    form.ReceiptType = \"new\"  //!!!!\n                    form.receiptID = self.datalist.length+1\n                    form.fromAccount = this.AddContractForm.fromAccount\n                    form.toAccount = this.AddContractForm.toAccount\n                    form.amount = this.AddContractForm.amount\n                    form.prover = this.AddContractForm.prover\n                     form.financinged = 0\n                    form.settled = 0\n                    form.transferRecord = []\n                    form.leftValue = this.AddContractForm.amount\n                    data:form\n                    self.datalist.push(form)\n                    */\n\n                    console.info('333', result.output);\n                    return 1;\n                  }\n                  /*\n                  let form = {}\n                  form.ReceiptType = \"new\"  //!!!!\n                  form.receiptID = self.datalist.length+1\n                  form.fromAccount = this.AddContractForm.fromAccount\n                  form.toAccount = this.AddContractForm.toAccount\n                  form.amount = this.AddContractForm.amount\n                  form.prover = this.AddContractForm.prover\n                   form.financinged = 0\n                  form.settled = 0\n                  form.transferRecord = []\n                  form.leftValue = this.AddContractForm.amount\n                  self.datalist.push(form)\n                  */\n                  //let flag = false\n\n                  /*\n                  for(let i = 0; i < self.datalist.length; i = i +1){\n                      self.datalist[i].ReceiptType == form.ReceiptType\n                          flag = true\n                          self.datalist[i].receiptID = form.receiptID\n                          self.datalist[i].fromAccount = form.fromAccount\n                          self.datalist[i].toAccount = form.toAccount\n                          self.datalist[i].amount = form.amount\n                          self.datalist[i].prover = form.prover\n                           self.datalist[i].financinged = form.financinged\n                          self.datalist[i].settled = form.settled\n                          self.datalist[i].transferRecord = form.transferRecord\n                          self.datalist[i].leftValue = form.leftValue\n                      }\n                  }\n                  if(flag == false){\n                      self.datalist.push(form)\n                  }*/\n                  // this.list.push({name: 'Asset'})\n                  //   self.datalist.push({name: param,contractAddress: result.contractAddress})\n\n                });\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function makeAddContract(_x3) {\n        return _makeAddContract.apply(this, arguments);\n      }\n\n      return makeAddContract;\n    }(),\n    makeFinancing: function () {\n      var _makeFinancing = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(params) {\n        var self, result;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                //直接全局变量给他是不行的\n                //要设置一个self中介\n                self = this;\n                result = {}; //   let da = {\n                //     contractName: param,\n                //   }\n\n                console.info('param ', params);\n                _context4.next = 5;\n                return axios.request({\n                  url: \"Financing\",\n                  data: params,\n                  headers: {\n                    'Content-type': 'application/x-www-form-urlencoded'\n                  },\n                  method: \"post\"\n                }).then(function (res) {\n                  console.info(res.data);\n                  result = res.data;\n                  var retCode = result.output; //发起新合同失败  这部分独有\n\n                  if (retCode[0] != 0) {} else {\n                    self.datalist.push(params);\n                    console.info('333', result.output);\n                    return 1;\n                  } // this.list.push({name: 'Asset'})\n                  //   self.datalist.push({name: param,contractAddress: result.contractAddress})\n\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function makeFinancing(_x4) {\n        return _makeFinancing.apply(this, arguments);\n      }\n\n      return makeFinancing;\n    }(),\n    makeSettle: function () {\n      var _makeSettle = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(params) {\n        var self, result;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                //直接全局变量给他是不行的\n                //要设置一个self中介\n                self = this;\n                result = {}; //   let da = {\n                //     contractName: param,\n                //   }\n\n                console.info('param ', params);\n                _context5.next = 5;\n                return axios.request({\n                  url: \"Settle\",\n                  data: params,\n                  headers: {\n                    'Content-type': 'application/x-www-form-urlencoded'\n                  },\n                  method: \"post\"\n                }).then(function (res) {\n                  console.info(res.data);\n                  result = res.data;\n                  var retCode = result.output; //发起新合同失败  这部分独有\n\n                  /*\n                    if(retCode[0] != \"0\") {\n                    }\n                    else {\n                        self.datalist.push(params)\n                        console.info('333',result.output)\n                        return 1\n                    }\n                    */\n\n                  var form1 = {};\n                  form1.ReceiptType = \"financing\";\n                  form1.receiptID = self.datalist.length + 1;\n                  form1.fromAccount = self.datalist[this.AddContractForm.receiptID - 1].fromAccount;\n                  form1.toAccount = self.datalist[this.AddContractForm.receiptID - 1].toAccount;\n                  form1.amount = self.datalist[this.AddContractForm.receiptID - 1].amount;\n                  form1.prover = self.datalist[this.AddContractForm.receiptID - 1].prover;\n                  form1.financinged = self.datalist[this.AddContractForm.receiptID - 1].financinged;\n                  form1.settled = 1;\n                  form1.transferRecord = self.datalist[this.AddContractForm.receiptID - 1].transferRecord;\n                  form1.leftValue = 0;\n                  self.datalist.push(form1); // this.list.push({name: 'Asset'})\n                  //   self.datalist.push({name: param,contractAddress: result.contractAddress})\n                });\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function makeSettle(_x5) {\n        return _makeSettle.apply(this, arguments);\n      }\n\n      return makeSettle;\n    }(),\n    //2.0 导致isAddContract为1\n    openAddContract: function openAddContract() {\n      this.isAddContract = true;\n    },\n    //4.0\n    doAddContract: function doAddContract() {\n      var _this = this;\n\n      var self = this;\n      this.$refs.AddContractForm.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(valid) {\n          var content;\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  //检验表单\n                  if (valid) {\n                    //console.info('AddContract form',this.AddContractForm.account, this.AddContractForm.property, this.AddContractForm.credit)\n                    content = {};\n                    content.ReceiptType = \"new\"; //!!!!\n\n                    content.receiptID = self.datalist.length + 1;\n                    content.fromAccount = _this.AddContractForm.fromAccount;\n                    content.toAccount = _this.AddContractForm.toAccount;\n                    content.prover = _this.AddContractForm.prover;\n                    content.amount = _this.AddContractForm.amount;\n                    content.financinged = 0;\n                    content.settled = 0;\n                    /*\n                    content.transferRecord = {}\n                    let t\n                    t.content.transferRecord.length=0\n                    content.transferRecord.push(t)\n                    */\n\n                    content.leftValue = _this.AddContractForm.amount; //content.contract = DEFAULTCONTRCT\n                    //content.addr = DEFAULTCONTRACTADDRESS\n\n                    content.func = 'AddContract'; //5.0\n\n                    _this.makeAddContract(content);\n\n                    _this.$Message.success('发起新合同成功');\n\n                    _this.cancelAddContract();\n                  } else {\n                    _this.$Message.error('请正确填写表单');\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        return function (_x6) {\n          return _ref.apply(this, arguments);\n        };\n      }()); // this.isAddContract = false\n    },\n    cancelAddContract: function cancelAddContract() {\n      // 重置功能添加表单对象\n      this.$refs.AddContractForm.resetFields();\n      this.AddContractForm = {};\n      this.isAddContract = false;\n    },\n    openFinancing: function openFinancing() {\n      this.isFinancing = true;\n    },\n    doFinancing: function doFinancing() {\n      var _this2 = this;\n\n      var self = this;\n      this.$refs.FinancingForm.validate( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(valid) {\n          var content;\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  //检验表单\n                  if (valid) {\n                    content = {};\n                    content.ReceiptType = \"financing\";\n                    content.receiptID = _this2.FinancingForm.receiptID; //content.receiptID = this.FinancingForm.receiptID\n\n                    content.fromAccount = self.datalist[_this2.FinancingForm.receiptID - 1].fromAccount;\n                    content.toAccount = self.datalist[_this2.FinancingForm.receiptID - 1].toAccount;\n                    content.amount = self.datalist[_this2.FinancingForm.receiptID - 1].amount;\n                    content.prover = self.datalist[_this2.FinancingForm.receiptID - 1].prover;\n                    content.financinged = 1;\n                    content.settled = self.datalist[_this2.FinancingForm.receiptID - 1].settled; //content.contract = DEFAULTCONTRCT\n                    //content.addr = DEFAULTCONTRACTADDRESS\n\n                    content.func = 'Financing'; //content.receiptID = this.FinancingForm.receiptID\n                    //content.transferRecord = self.datalist[this.FinancingForm.receiptID-1].transferRecord\n\n                    content.leftValue = 0;\n\n                    _this2.makeFinancing(content);\n\n                    _this2.$Message.success('单据融资成功');\n\n                    _this2.cancelFinancing();\n                  } else {\n                    _this2.$Message.error('请正确填写表单');\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        return function (_x7) {\n          return _ref2.apply(this, arguments);\n        };\n      }()); // this.isFinancing = false\n    },\n    cancelFinancing: function cancelFinancing() {\n      // 重置功能添加表单对象\n      this.$refs.FinancingForm.resetFields();\n      this.FinancingForm = {};\n      this.isFinancing = false;\n    },\n    openSettle: function openSettle() {\n      this.isSettle = true;\n    },\n    doSettle: function doSettle() {\n      var _this3 = this;\n\n      var self = this;\n      this.$refs.SettleForm.validate( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(valid) {\n          var content;\n          return regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  //检验表单\n                  if (valid) {\n                    content = {};\n                    content.receiptID = _this3.SettleForm.receiptID; //content.contract = DEFAULTCONTRCT\n                    //content.addr = DEFAULTCONTRACTADDRESS\n\n                    content.func = 'Settle';\n\n                    _this3.makeSettle(content);\n\n                    _this3.$Message.success('结算账款成功');\n\n                    _this3.cancelSettle();\n                  } else {\n                    _this3.$Message.error('请正确填写表单');\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        return function (_x8) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    },\n    cancelSettle: function cancelSettle() {\n      // 重置功能添加表单对象\n      this.$refs.SettleForm.resetFields();\n      this.SettleForm = {};\n      this.isSettle = false;\n    },\n    //点击Transfer的确认交易后1.0\n    cancelTransfer: function cancelTransfer() {\n      this.$refs.TransferForm.resetFields();\n      this.TransferForm = {};\n      this.isTransfer = false;\n    },\n    //打开单据转让\n    openTransfer: function openTransfer() {\n      this.isTransfer = true;\n    },\n    doTransfer: function doTransfer() {\n      var _this4 = this;\n\n      var self = this;\n      this.$refs.TransferForm.validate( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(valid) {\n          var content;\n          return regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  //检验表单\n                  if (valid) {\n                    content = {};\n                    content.ReceiptType = \"transfer\"; //!!!!\n\n                    content.receiptID = self.datalist.length + 1;\n                    content.fromAccount = _this4.TransferForm.fromAccount;\n                    content.toAccount = _this4.TransferForm.toAccount;\n                    content.amount = _this4.TransferForm.amount;\n                    content.prover = 0;\n                    content.financinged = 0;\n                    content.settled = 0; //form.transferRecord = []\n\n                    content.leftValue = _this4.TransferForm.amount; //content.contract = DEFAULTCONTRCT\n                    //content.addr = DEFAULTCONTRACTADDRESS\n\n                    content.func = 'Transfer';\n\n                    _this4.makeTransfer(content); //点击Transfer的确认交易后1.1\n                    //   this.deploy(this.AddContractForm.name)\n\n\n                    _this4.$Message.success('单据转让成功');\n\n                    _this4.cancelTransfer();\n                  } else {\n                    _this4.$Message.error('请正确填写表单');\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9);\n        }));\n\n        return function (_x9) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n  }\n  /*\n  created () {\n    // this.deploy('Asset')\n    this.isRegister = false\n  },\n  */\n\n};",null]}