{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js!/home/lxt/SupplyChain-master/iview-admin/node_modules/eslint-loader/index.js??ref--13-0!/home/lxt/SupplyChain-master/iview-admin/src/store/module/app.js","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/store/module/app.js","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/.babelrc","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/lxt/SupplyChain-master/iview-admin/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/home/lxt/SupplyChain-master/iview-admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getBreadCrumbList, setTagNavListInLocalstorage, getMenuByRouter, getTagNavListFromLocalstorage, getHomeRoute, getNextRoute, routeHasExist, routeEqual, getRouteTitleHandled, localSave, localRead } from '@/libs/util';\nimport { saveErrorLogger } from '@/api/data';\nimport router from '@/router';\nimport routers from '@/router/routers';\nimport config from '@/config';\nvar homeName = config.homeName;\n\nvar closePage = function closePage(state, route) {\n  var nextRoute = getNextRoute(state.tagNavList, route);\n  state.tagNavList = state.tagNavList.filter(function (item) {\n    return !routeEqual(item, route);\n  });\n  router.push(nextRoute);\n};\n\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: {},\n    local: localRead('local'),\n    errorList: [],\n    hasReadErrorPage: false\n  },\n  getters: {\n    menuList: function menuList(state, getters, rootState) {\n      return getMenuByRouter(routers, rootState.user.access);\n    },\n    errorCount: function errorCount(state) {\n      return state.errorList.length;\n    }\n  },\n  mutations: {\n    setBreadCrumb: function setBreadCrumb(state, route) {\n      state.breadCrumbList = getBreadCrumbList(route, state.homeRoute);\n    },\n    setHomeRoute: function setHomeRoute(state, routes) {\n      state.homeRoute = getHomeRoute(routes, homeName);\n    },\n    setTagNavList: function setTagNavList(state, list) {\n      var tagList = [];\n\n      if (list) {\n        tagList = _toConsumableArray(list);\n      } else tagList = getTagNavListFromLocalstorage() || [];\n\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift();\n      var homeTagIndex = tagList.findIndex(function (item) {\n        return item.name === homeName;\n      });\n\n      if (homeTagIndex > 0) {\n        var homeTag = tagList.splice(homeTagIndex, 1)[0];\n        tagList.unshift(homeTag);\n      }\n\n      state.tagNavList = tagList;\n      setTagNavListInLocalstorage(_toConsumableArray(tagList));\n    },\n    closeTag: function closeTag(state, route) {\n      var tag = state.tagNavList.filter(function (item) {\n        return routeEqual(item, route);\n      });\n      route = tag[0] ? tag[0] : null;\n      if (!route) return;\n      closePage(state, route);\n    },\n    addTag: function addTag(state, _ref) {\n      var route = _ref.route,\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? 'unshift' : _ref$type;\n      var router = getRouteTitleHandled(route);\n\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router);else {\n          if (router.name === homeName) state.tagNavList.unshift(router);else state.tagNavList.splice(1, 0, router);\n        }\n        setTagNavListInLocalstorage(_toConsumableArray(state.tagNavList));\n      }\n    },\n    setLocal: function setLocal(state, lang) {\n      localSave('local', lang);\n      state.local = lang;\n    },\n    addError: function addError(state, error) {\n      state.errorList.push(error);\n    },\n    setHasReadErrorLoggerStatus: function setHasReadErrorLoggerStatus(state) {\n      var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      state.hasReadErrorPage = status;\n    }\n  },\n  actions: {\n    addErrorLog: function addErrorLog(_ref2, info) {\n      var commit = _ref2.commit,\n          rootState = _ref2.rootState;\n      if (!window.location.href.includes('error_logger_page')) commit('setHasReadErrorLoggerStatus', false);\n      var _rootState$user = rootState.user,\n          token = _rootState$user.token,\n          userId = _rootState$user.userId,\n          userName = _rootState$user.userName;\n\n      var data = _objectSpread(_objectSpread({}, info), {}, {\n        time: Date.parse(new Date()),\n        token: token,\n        userId: userId,\n        userName: userName\n      });\n\n      saveErrorLogger(info).then(function () {\n        commit('addError', data);\n      });\n    }\n  }\n};",{"version":3,"sources":["/home/lxt/SupplyChain-master/iview-admin/src/store/module/app.js"],"names":["getBreadCrumbList","setTagNavListInLocalstorage","getMenuByRouter","getTagNavListFromLocalstorage","getHomeRoute","getNextRoute","routeHasExist","routeEqual","getRouteTitleHandled","localSave","localRead","saveErrorLogger","router","routers","config","homeName","closePage","state","route","nextRoute","tagNavList","filter","item","push","breadCrumbList","homeRoute","local","errorList","hasReadErrorPage","getters","menuList","rootState","user","access","errorCount","length","mutations","setBreadCrumb","setHomeRoute","routes","setTagNavList","list","tagList","name","shift","homeTagIndex","findIndex","homeTag","splice","unshift","closeTag","tag","addTag","type","setLocal","lang","addError","error","setHasReadErrorLoggerStatus","status","actions","addErrorLog","info","commit","window","location","href","includes","token","userId","userName","data","time","Date","parse","then"],"mappings":"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","sourcesContent":["import {\n  getBreadCrumbList,\n  setTagNavListInLocalstorage,\n  getMenuByRouter,\n  getTagNavListFromLocalstorage,\n  getHomeRoute,\n  getNextRoute,\n  routeHasExist,\n  routeEqual,\n  getRouteTitleHandled,\n  localSave,\n  localRead\n} from '@/libs/util'\nimport { saveErrorLogger } from '@/api/data'\nimport router from '@/router'\nimport routers from '@/router/routers'\nimport config from '@/config'\nconst { homeName } = config\n\nconst closePage = (state, route) => {\n  const nextRoute = getNextRoute(state.tagNavList, route)\n  state.tagNavList = state.tagNavList.filter(item => {\n    return !routeEqual(item, route)\n  })\n  router.push(nextRoute)\n}\n\nexport default {\n  state: {\n    breadCrumbList: [],\n    tagNavList: [],\n    homeRoute: {},\n    local: localRead('local'),\n    errorList: [],\n    hasReadErrorPage: false\n  },\n  getters: {\n    menuList: (state, getters, rootState) => getMenuByRouter(routers, rootState.user.access),\n    errorCount: state => state.errorList.length\n  },\n  mutations: {\n    setBreadCrumb (state, route) {\n      state.breadCrumbList = getBreadCrumbList(route, state.homeRoute)\n    },\n    setHomeRoute (state, routes) {\n      state.homeRoute = getHomeRoute(routes, homeName)\n    },\n    setTagNavList (state, list) {\n      let tagList = []\n      if (list) {\n        tagList = [...list]\n      } else tagList = getTagNavListFromLocalstorage() || []\n      if (tagList[0] && tagList[0].name !== homeName) tagList.shift()\n      let homeTagIndex = tagList.findIndex(item => item.name === homeName)\n      if (homeTagIndex > 0) {\n        let homeTag = tagList.splice(homeTagIndex, 1)[0]\n        tagList.unshift(homeTag)\n      }\n      state.tagNavList = tagList\n      setTagNavListInLocalstorage([...tagList])\n    },\n    closeTag (state, route) {\n      let tag = state.tagNavList.filter(item => routeEqual(item, route))\n      route = tag[0] ? tag[0] : null\n      if (!route) return\n      closePage(state, route)\n    },\n    addTag (state, { route, type = 'unshift' }) {\n      let router = getRouteTitleHandled(route)\n      if (!routeHasExist(state.tagNavList, router)) {\n        if (type === 'push') state.tagNavList.push(router)\n        else {\n          if (router.name === homeName) state.tagNavList.unshift(router)\n          else state.tagNavList.splice(1, 0, router)\n        }\n        setTagNavListInLocalstorage([...state.tagNavList])\n      }\n    },\n    setLocal (state, lang) {\n      localSave('local', lang)\n      state.local = lang\n    },\n    addError (state, error) {\n      state.errorList.push(error)\n    },\n    setHasReadErrorLoggerStatus (state, status = true) {\n      state.hasReadErrorPage = status\n    }\n  },\n  actions: {\n    addErrorLog ({ commit, rootState }, info) {\n      if (!window.location.href.includes('error_logger_page')) commit('setHasReadErrorLoggerStatus', false)\n      const { user: { token, userId, userName } } = rootState\n      let data = {\n        ...info,\n        time: Date.parse(new Date()),\n        token,\n        userId,\n        userName\n      }\n      saveErrorLogger(info).then(() => {\n        commit('addError', data)\n      })\n    }\n  }\n}\n"]}]}