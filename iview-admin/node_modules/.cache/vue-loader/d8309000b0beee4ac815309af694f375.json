{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lxt/SupplyChain-master/iview-admin/src/view/single-page/message/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/view/single-page/message/index.vue","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\nconst listDic = {\n  unread: 'messageUnreadList',\n  readed: 'messageReadedList',\n  trash: 'messageTrashList'\n}\nexport default {\n  name: 'message_page',\n  data () {\n    return {\n      listLoading: true,\n      contentLoading: false,\n      currentMessageType: 'unread',\n      messageContent: '',\n      showingMsgItem: {}\n    }\n  },\n  computed: {\n    ...mapState({\n      messageUnreadList: state => state.user.messageUnreadList,\n      messageReadedList: state => state.user.messageReadedList,\n      messageTrashList: state => state.user.messageTrashList,\n      messageList () {\n        return this[listDic[this.currentMessageType]]\n      },\n      titleClass () {\n        return {\n          'not-unread-list': this.currentMessageType !== 'unread'\n        }\n      }\n    }),\n    ...mapGetters([\n      'messageUnreadCount',\n      'messageReadedCount',\n      'messageTrashCount'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n      //\n    ]),\n    ...mapActions([\n      'getContentByMsgId',\n      'getMessageList',\n      'hasRead',\n      'removeReaded',\n      'restoreTrash'\n    ]),\n    stopLoading (name) {\n      this[name] = false\n    },\n    handleSelect (name) {\n      this.currentMessageType = name\n    },\n    handleView (msg_id) {\n      this.contentLoading = true\n      this.getContentByMsgId({ msg_id }).then(content => {\n        this.messageContent = content\n        const item = this.messageList.find(item => item.msg_id === msg_id)\n        if (item) this.showingMsgItem = item\n        if (this.currentMessageType === 'unread') this.hasRead({ msg_id })\n        this.stopLoading('contentLoading')\n      }).catch(() => {\n        this.stopLoading('contentLoading')\n      })\n    },\n    removeMsg (item) {\n      item.loading = true\n      const msg_id = item.msg_id\n      if (this.currentMessageType === 'readed') this.removeReaded({ msg_id })\n      else this.restoreTrash({ msg_id })\n    }\n  },\n  mounted () {\n    this.listLoading = true\n    // 请求获取消息列表\n    this.getMessageList().then(() => this.stopLoading('listLoading')).catch(() => this.stopLoading('listLoading'))\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/view/single-page/message","sourcesContent":["<template>\n  <Card shadow>\n    <div>\n      <div class=\"message-page-con message-category-con\">\n        <Menu width=\"auto\" active-name=\"unread\" @on-select=\"handleSelect\">\n          <MenuItem name=\"unread\">\n            <span class=\"category-title\">未读消息</span><Badge style=\"margin-left: 10px\" :count=\"messageUnreadCount\"></Badge>\n          </MenuItem>\n          <MenuItem name=\"readed\">\n            <span class=\"category-title\">已读消息</span><Badge style=\"margin-left: 10px\" class-name=\"gray-dadge\" :count=\"messageReadedCount\"></Badge>\n          </MenuItem>\n          <MenuItem name=\"trash\">\n            <span class=\"category-title\">回收站</span><Badge style=\"margin-left: 10px\" class-name=\"gray-dadge\" :count=\"messageTrashCount\"></Badge>\n          </MenuItem>\n        </Menu>\n      </div>\n      <div class=\"message-page-con message-list-con\">\n        <Spin fix v-if=\"listLoading\" size=\"large\"></Spin>\n        <Menu\n          width=\"auto\"\n          active-name=\"\"\n          :class=\"titleClass\"\n          @on-select=\"handleView\"\n        >\n          <MenuItem v-for=\"item in messageList\" :name=\"item.msg_id\" :key=\"`msg_${item.msg_id}`\">\n            <div>\n              <p class=\"msg-title\">{{ item.title }}</p>\n              <Badge status=\"default\" :text=\"item.create_time\" />\n              <Button\n                style=\"float: right;margin-right: 20px;\"\n                :style=\"{ display: item.loading ? 'inline-block !important' : '' }\"\n                :loading=\"item.loading\"\n                size=\"small\"\n                :icon=\"currentMessageType === 'readed' ? 'md-trash' : 'md-redo'\"\n                :title=\"currentMessageType === 'readed' ? '删除' : '还原'\"\n                type=\"text\"\n                v-show=\"currentMessageType !== 'unread'\"\n                @click.native.stop=\"removeMsg(item)\"></Button>\n            </div>\n          </MenuItem>\n        </Menu>\n      </div>\n      <div class=\"message-page-con message-view-con\">\n        <Spin fix v-if=\"contentLoading\" size=\"large\"></Spin>\n        <div class=\"message-view-header\">\n          <h2 class=\"message-view-title\">{{ showingMsgItem.title }}</h2>\n          <time class=\"message-view-time\">{{ showingMsgItem.create_time }}</time>\n        </div>\n        <div v-html=\"messageContent\"></div>\n      </div>\n    </div>\n  </Card>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\nconst listDic = {\n  unread: 'messageUnreadList',\n  readed: 'messageReadedList',\n  trash: 'messageTrashList'\n}\nexport default {\n  name: 'message_page',\n  data () {\n    return {\n      listLoading: true,\n      contentLoading: false,\n      currentMessageType: 'unread',\n      messageContent: '',\n      showingMsgItem: {}\n    }\n  },\n  computed: {\n    ...mapState({\n      messageUnreadList: state => state.user.messageUnreadList,\n      messageReadedList: state => state.user.messageReadedList,\n      messageTrashList: state => state.user.messageTrashList,\n      messageList () {\n        return this[listDic[this.currentMessageType]]\n      },\n      titleClass () {\n        return {\n          'not-unread-list': this.currentMessageType !== 'unread'\n        }\n      }\n    }),\n    ...mapGetters([\n      'messageUnreadCount',\n      'messageReadedCount',\n      'messageTrashCount'\n    ])\n  },\n  methods: {\n    ...mapMutations([\n      //\n    ]),\n    ...mapActions([\n      'getContentByMsgId',\n      'getMessageList',\n      'hasRead',\n      'removeReaded',\n      'restoreTrash'\n    ]),\n    stopLoading (name) {\n      this[name] = false\n    },\n    handleSelect (name) {\n      this.currentMessageType = name\n    },\n    handleView (msg_id) {\n      this.contentLoading = true\n      this.getContentByMsgId({ msg_id }).then(content => {\n        this.messageContent = content\n        const item = this.messageList.find(item => item.msg_id === msg_id)\n        if (item) this.showingMsgItem = item\n        if (this.currentMessageType === 'unread') this.hasRead({ msg_id })\n        this.stopLoading('contentLoading')\n      }).catch(() => {\n        this.stopLoading('contentLoading')\n      })\n    },\n    removeMsg (item) {\n      item.loading = true\n      const msg_id = item.msg_id\n      if (this.currentMessageType === 'readed') this.removeReaded({ msg_id })\n      else this.restoreTrash({ msg_id })\n    }\n  },\n  mounted () {\n    this.listLoading = true\n    // 请求获取消息列表\n    this.getMessageList().then(() => this.stopLoading('listLoading')).catch(() => this.stopLoading('listLoading'))\n  }\n}\n</script>\n\n<style lang=\"less\">\n.message-page{\n  &-con{\n    height: ~\"calc(100vh - 176px)\";\n    display: inline-block;\n    vertical-align: top;\n    position: relative;\n    &.message-category-con{\n      border-right: 1px solid #e6e6e6;\n      width: 200px;\n    }\n    &.message-list-con{\n      border-right: 1px solid #e6e6e6;\n      width: 230px;\n    }\n    &.message-view-con{\n      position: absolute;\n      left: 446px;\n      top: 16px;\n      right: 16px;\n      bottom: 16px;\n      overflow: auto;\n      padding: 12px 20px 0;\n      .message-view-header{\n        margin-bottom: 20px;\n        .message-view-title{\n          display: inline-block;\n        }\n        .message-view-time{\n          margin-left: 20px;\n        }\n      }\n    }\n    .category-title{\n      display: inline-block;\n      width: 65px;\n    }\n    .gray-dadge{\n      background: gainsboro;\n    }\n    .not-unread-list{\n      .msg-title{\n        color: rgb(170, 169, 169);\n      }\n      .ivu-menu-item{\n        .ivu-btn.ivu-btn-text.ivu-btn-small.ivu-btn-icon-only{\n          display: none;\n        }\n        &:hover{\n          .ivu-btn.ivu-btn-text.ivu-btn-small.ivu-btn-icon-only{\n            display: inline-block;\n          }\n        }\n      }\n    }\n  }\n}\n</style>\n"]}]}