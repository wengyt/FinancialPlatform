{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lxt/SupplyChain-master/iview-admin/src/components/main/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/components/main/main.vue","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SideMenu from './components/side-menu'\nimport HeaderBar from './components/header-bar'\nimport TagsNav from './components/tags-nav'\nimport User from './components/user'\nimport ABackTop from './components/a-back-top'\nimport Fullscreen from './components/fullscreen'\nimport Language from './components/language'\nimport ErrorStore from './components/error-store'\nimport { mapMutations, mapActions, mapGetters } from 'vuex'\nimport { getNewTagList, routeEqual } from '@/libs/util'\nimport routers from '@/router/routers'\nimport minLogo from '@/assets/images/logo-min.jpg'\nimport maxLogo from '@/assets/images/logo.jpg'\nimport './main.less'\nexport default {\n  name: 'Main',\n  components: {\n    SideMenu,\n    HeaderBar,\n    Language,\n    TagsNav,\n    Fullscreen,\n    ErrorStore,\n    User,\n    ABackTop\n  },\n  data () {\n    return {\n      collapsed: false,\n      minLogo,\n      maxLogo,\n      isFullscreen: false\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'errorCount'\n    ]),\n    tagNavList () {\n      return this.$store.state.app.tagNavList\n    },\n    tagRouter () {\n      return this.$store.state.app.tagRouter\n    },\n    userAvatar () {\n      return this.$store.state.user.avatarImgPath\n    },\n    cacheList () {\n      const list = ['ParentView', ...this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []]\n      return list\n    },\n    menuList () {\n      return this.$store.getters.menuList\n    },\n    local () {\n      return this.$store.state.app.local\n    },\n    hasReadErrorPage () {\n      return this.$store.state.app.hasReadErrorPage\n    },\n    unreadCount () {\n      return this.$store.state.user.unreadCount\n    }\n  },\n  methods: {\n    ...mapMutations([\n      'setBreadCrumb',\n      'setTagNavList',\n      'addTag',\n      'setLocal',\n      'setHomeRoute',\n      'closeTag'\n    ]),\n    ...mapActions([\n      'handleLogin',\n      'getUnreadMessageCount'\n    ]),\n    turnToPage (route) {\n      let { name, params, query } = {}\n      if (typeof route === 'string') name = route\n      else {\n        name = route.name\n        params = route.params\n        query = route.query\n      }\n      if (name.indexOf('isTurnByHref_') > -1) {\n        window.open(name.split('_')[1])\n        return\n      }\n      this.$router.push({\n        name,\n        params,\n        query\n      })\n    },\n    handleCollapsedChange (state) {\n      this.collapsed = state\n    },\n    handleCloseTag (res, type, route) {\n      if (type !== 'others') {\n        if (type === 'all') {\n          this.turnToPage(this.$config.homeName)\n        } else {\n          if (routeEqual(this.$route, route)) {\n            this.closeTag(route)\n          }\n        }\n      }\n      this.setTagNavList(res)\n    },\n    handleClick (item) {\n      this.turnToPage(item)\n    }\n  },\n  watch: {\n    '$route' (newRoute) {\n      const { name, query, params, meta } = newRoute\n      this.addTag({\n        route: { name, query, params, meta },\n        type: 'push'\n      })\n      this.setBreadCrumb(newRoute)\n      this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\n      this.$refs.sideMenu.updateOpenName(newRoute.name)\n    }\n  },\n  mounted () {\n    /**\n     * @description 初始化设置面包屑导航和标签导航\n     */\n    this.setTagNavList()\n    this.setHomeRoute(routers)\n    const { name, params, query, meta } = this.$route\n    this.addTag({\n      route: { name, params, query, meta }\n    })\n    this.setBreadCrumb(this.$route)\n    // 设置初始语言\n    this.setLocal(this.$i18n.locale)\n    // 如果当前打开页面不在标签栏中，跳到homeName页\n    if (!this.tagNavList.find(item => item.name === this.$route.name)) {\n      this.$router.push({\n        name: this.$config.homeName\n      })\n    }\n    // 获取未读消息条数\n    this.getUnreadMessageCount()\n  }\n}\n",null]}