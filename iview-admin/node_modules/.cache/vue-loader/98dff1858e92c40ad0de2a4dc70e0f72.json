{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lxt/SupplyChain-master/iview-admin/src/components/count-to/count-to.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/components/count-to/count-to.vue","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport CountUp from 'countup'\nimport './index.less'\nexport default {\n  name: 'CountTo',\n  props: {\n    init: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 起始值，即动画开始前显示的数值\n     */\n    startVal: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 结束值，即动画结束后显示的数值\n     */\n    end: {\n      type: Number,\n      required: true\n    },\n    /**\n     * @description 保留几位小数\n     */\n    decimals: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 分隔整数和小数的符号，默认是小数点\n     */\n    decimal: {\n      type: String,\n      default: '.'\n    },\n    /**\n     * @description 动画持续的时间，单位是秒\n     */\n    duration: {\n      type: Number,\n      default: 2\n    },\n    /**\n     * @description 动画延迟开始的时间，单位是秒\n     */\n    delay: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 是否禁用easing动画效果\n     */\n    uneasing: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\n     */\n    usegroup: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 用于分组(usegroup)的符号\n     */\n    separator: {\n      type: String,\n      default: ','\n    },\n    /**\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\n     */\n    simplify: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\n     *              1000即显示为1K+\n     */\n    unit: {\n      type: Array,\n      default () {\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']]\n      }\n    },\n    countClass: {\n      type: String,\n      default: ''\n    },\n    unitClass: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      counter: null,\n      unitText: ''\n    }\n  },\n  computed: {\n    counterId () {\n      return `count_to_${this._uid}`\n    }\n  },\n  methods: {\n    getHandleVal (val, len) {\n      return {\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\n        unitText: this.unit[len - 1][1]\n      }\n    },\n    transformValue (val) {\n      let len = this.unit.length\n      let res = {\n        endVal: 0,\n        unitText: ''\n      }\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val\n      else {\n        for (let i = 1; i < len; i++) {\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i)\n        }\n      }\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len)\n      return res\n    },\n    getValue (val) {\n      let res = 0\n      if (this.simplify) {\n        let { endVal, unitText } = this.transformValue(val)\n        this.unitText = unitText\n        res = endVal\n      } else {\n        res = val\n      }\n      return res\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let endVal = this.getValue(this.end)\n      this.counter = new CountUp(this.counterId, this.startVal, endVal, this.decimals, this.duration, {\n        useEasing: !this.uneasing,\n        useGrouping: this.useGroup,\n        separator: this.separator,\n        decimal: this.decimal\n      })\n      setTimeout(() => {\n        if (!this.counter.error) this.counter.start()\n      }, this.delay)\n    })\n  },\n  watch: {\n    end (newVal) {\n      let endVal = this.getValue(newVal)\n      this.counter.update(endVal)\n    }\n  }\n}\n",{"version":3,"sources":["count-to.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"count-to.vue","sourceRoot":"src/components/count-to","sourcesContent":["<template>\n  <div class=\"count-to-wrapper\">\n    <slot name=\"left\"/>\n    <p class=\"content-outer\"><span :class=\"['count-to-count-text', countClass]\" :id=\"counterId\">{{ init }}</span><i :class=\"['count-to-unit-text', unitClass]\">{{ unitText }}</i></p>\n    <slot name=\"right\"/>\n  </div>\n</template>\n\n<script>\nimport CountUp from 'countup'\nimport './index.less'\nexport default {\n  name: 'CountTo',\n  props: {\n    init: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 起始值，即动画开始前显示的数值\n     */\n    startVal: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 结束值，即动画结束后显示的数值\n     */\n    end: {\n      type: Number,\n      required: true\n    },\n    /**\n     * @description 保留几位小数\n     */\n    decimals: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 分隔整数和小数的符号，默认是小数点\n     */\n    decimal: {\n      type: String,\n      default: '.'\n    },\n    /**\n     * @description 动画持续的时间，单位是秒\n     */\n    duration: {\n      type: Number,\n      default: 2\n    },\n    /**\n     * @description 动画延迟开始的时间，单位是秒\n     */\n    delay: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * @description 是否禁用easing动画效果\n     */\n    uneasing: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\n     */\n    usegroup: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 用于分组(usegroup)的符号\n     */\n    separator: {\n      type: String,\n      default: ','\n    },\n    /**\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\n     */\n    simplify: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\n     *              1000即显示为1K+\n     */\n    unit: {\n      type: Array,\n      default () {\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']]\n      }\n    },\n    countClass: {\n      type: String,\n      default: ''\n    },\n    unitClass: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      counter: null,\n      unitText: ''\n    }\n  },\n  computed: {\n    counterId () {\n      return `count_to_${this._uid}`\n    }\n  },\n  methods: {\n    getHandleVal (val, len) {\n      return {\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\n        unitText: this.unit[len - 1][1]\n      }\n    },\n    transformValue (val) {\n      let len = this.unit.length\n      let res = {\n        endVal: 0,\n        unitText: ''\n      }\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val\n      else {\n        for (let i = 1; i < len; i++) {\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i)\n        }\n      }\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len)\n      return res\n    },\n    getValue (val) {\n      let res = 0\n      if (this.simplify) {\n        let { endVal, unitText } = this.transformValue(val)\n        this.unitText = unitText\n        res = endVal\n      } else {\n        res = val\n      }\n      return res\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let endVal = this.getValue(this.end)\n      this.counter = new CountUp(this.counterId, this.startVal, endVal, this.decimals, this.duration, {\n        useEasing: !this.uneasing,\n        useGrouping: this.useGroup,\n        separator: this.separator,\n        decimal: this.decimal\n      })\n      setTimeout(() => {\n        if (!this.counter.error) this.counter.start()\n      }, this.delay)\n    })\n  },\n  watch: {\n    end (newVal) {\n      let endVal = this.getValue(newVal)\n      this.counter.update(endVal)\n    }\n  }\n}\n</script>\n"]}]}