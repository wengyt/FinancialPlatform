{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lxt/SupplyChain-master/iview-admin/src/components/main/components/side-menu/collapsed-menu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/components/main/components/side-menu/collapsed-menu.vue","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mixin from './mixin'\nimport itemMixin from './item-mixin'\nimport { findNodeUpperByClasses } from '@/libs/util'\n\nexport default {\n  name: 'CollapsedMenu',\n  mixins: [ mixin, itemMixin ],\n  props: {\n    hideTitle: {\n      type: Boolean,\n      default: false\n    },\n    rootIconSize: {\n      type: Number,\n      default: 16\n    }\n  },\n  data () {\n    return {\n      placement: 'right-end'\n    }\n  },\n  methods: {\n    handleClick (name) {\n      this.$emit('on-click', name)\n    },\n    handleMousemove (event, children) {\n      const { pageY } = event\n      const height = children.length * 38\n      const isOverflow = pageY + height < window.innerHeight\n      this.placement = isOverflow ? 'right-start' : 'right-end'\n    }\n  },\n  mounted () {\n    let dropdown = findNodeUpperByClasses(this.$refs.dropdown.$el, ['ivu-select-dropdown', 'ivu-dropdown-transfer'])\n    if (dropdown) dropdown.style.overflow = 'visible'\n  }\n}\n",{"version":3,"sources":["collapsed-menu.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"collapsed-menu.vue","sourceRoot":"src/components/main/components/side-menu","sourcesContent":["<template>\n  <Dropdown ref=\"dropdown\" @on-click=\"handleClick\" :class=\"hideTitle ? '' : 'collased-menu-dropdown'\" :transfer=\"hideTitle\" :placement=\"placement\">\n    <a class=\"drop-menu-a\" type=\"text\" @mouseover=\"handleMousemove($event, children)\" :style=\"{textAlign: !hideTitle ? 'left' : ''}\"><common-icon :size=\"rootIconSize\" :color=\"textColor\" :type=\"parentItem.icon\"/><span class=\"menu-title\" v-if=\"!hideTitle\">{{ showTitle(parentItem) }}</span><Icon style=\"float: right;\" v-if=\"!hideTitle\" type=\"ios-arrow-forward\" :size=\"16\"/></a>\n    <DropdownMenu ref=\"dropdown\" slot=\"list\">\n      <template v-for=\"child in children\">\n        <collapsed-menu v-if=\"showChildren(child)\" :icon-size=\"iconSize\" :parent-item=\"child\" :key=\"`drop-${child.name}`\"></collapsed-menu>\n        <DropdownItem v-else :key=\"`drop-${child.name}`\" :name=\"child.name\"><common-icon :size=\"iconSize\" :type=\"child.icon\"/><span class=\"menu-title\">{{ showTitle(child) }}</span></DropdownItem>\n      </template>\n    </DropdownMenu>\n  </Dropdown>\n</template>\n<script>\nimport mixin from './mixin'\nimport itemMixin from './item-mixin'\nimport { findNodeUpperByClasses } from '@/libs/util'\n\nexport default {\n  name: 'CollapsedMenu',\n  mixins: [ mixin, itemMixin ],\n  props: {\n    hideTitle: {\n      type: Boolean,\n      default: false\n    },\n    rootIconSize: {\n      type: Number,\n      default: 16\n    }\n  },\n  data () {\n    return {\n      placement: 'right-end'\n    }\n  },\n  methods: {\n    handleClick (name) {\n      this.$emit('on-click', name)\n    },\n    handleMousemove (event, children) {\n      const { pageY } = event\n      const height = children.length * 38\n      const isOverflow = pageY + height < window.innerHeight\n      this.placement = isOverflow ? 'right-start' : 'right-end'\n    }\n  },\n  mounted () {\n    let dropdown = findNodeUpperByClasses(this.$refs.dropdown.$el, ['ivu-select-dropdown', 'ivu-dropdown-transfer'])\n    if (dropdown) dropdown.style.overflow = 'visible'\n  }\n}\n</script>\n"]}]}