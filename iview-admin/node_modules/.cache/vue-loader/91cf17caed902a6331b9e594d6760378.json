{"remainingRequest":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lxt/SupplyChain-master/iview-admin/src/view/SupplyChain.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lxt/SupplyChain-master/iview-admin/src/view/SupplyChain.vue","mtime":1583204240000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lxt/SupplyChain-master/iview-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"@/libs/api.request\";\nimport qs from 'qs';\n\n// Vue.prototype.$qs = qs\nexport default {\n  data() {\n    //那个中间的单据表\n    return {\n      columns: [\n        /*{\n          type: 'selection',\n          width: 60,\n          align: 'center'\n        },*/\n        {\n          title: '单据刷新原因',\n          align: 'center',\n          key: 'ReceiptType',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        {\n          title: '单据ID',\n          align: 'center',\n          key: 'receiptID',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        {\n          title: '发起者地址',\n          align: 'center',\n          key: 'fromAccount',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        {\n          title: '收款人地址',\n          align: 'center',\n          key: 'toAccount',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        {\n          title: '金额',\n          align: 'center',\n          key: 'amount',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        {\n          title: '确认人地址',\n          align: 'center',\n          key: 'prover',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        {\n          title: '是否已融资',\n          align: 'center',\n          key: 'financinged',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        {\n          title: '是否已结算',\n          align: 'center',\n          key: 'settled',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        /*\n        {\n          title: '被转让记录',\n          align: 'center',\n          key: 'transferRecord',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n        */\n        {\n          title: '剩余价值',\n          align: 'center',\n          key: 'leftValue',\n          // 过滤器\n          render: (h, params) => {\n            let temp = params.row[params.column.key]\n            if (typeof (temp) === 'undefined') {\n              return h('div', '0')\n            } else {\n              return h('div', params.row[params.column.key])\n            }\n          }\n        },\n      ],\n\n      // 表单校验对象\n      //3.0.2 AddContractRules\n      AddContractRules: {\n        fromAccount: [\n          { required: true, message: '欠款人地址不能为空', trigger: 'blur' }\n        ],\n        toAccount: [\n          { required: true, message: '转让地址（收款人）不能为空', trigger: 'blur' }\n        ],\n        prover: [\n          { required: true, message: '见证方地址不能为空', trigger: 'blur' }\n        ],\n        amount: [\n          { required: true, message: '金额不能为空', trigger: 'blur' }\n        ],\n      },\n      TransferRules: {\n        fromAccount: [\n          { required: true, message: '此单据拥有者地址不能为空', trigger: 'blur' }\n        ],\n        toAccount: [\n          { required: true, message: '转让地址不能为空', trigger: 'blur' }\n        ],\n        amount: [\n          { required: true, message: '金额不能为空', trigger: 'blur' }\n        ],\n        receiptID: [\n          { required: true, message: '单据ID不能为空', trigger: 'blur' }\n        ],\n      },\n      FinancingRules: {\n        receiptID: [\n          { required: true, message: '单据ID不能为空', trigger: 'blur' }\n        ],\n      },\n      SettleRules: {\n        receiptID: [\n          { required: true, message: '单据ID不能为空', trigger: 'blur' }\n        ],\n      },\n     \n      page: {// 系统用户翻页对象\n        total: 10,\n        currentPage: 1,\n        current: 1\n      },\n      \n      isAddContract: false,\n      isTransfer: false,\n      isFinancing: false,\n      isSettle: false,\n      //isInfo: false,\n      AddContractForm: {},\n      TransferForm: {},\n      FinancingForm: {},\n      SettleForm: {},\n      //infoForm: {},\n      datalist: [\n      ]\n    };\n  },\n  \n  \n  methods: {\n      //make Transfer   ccccccccccccccccccccccccccccccccc\n    //点击Transfer的确认交易后1.1\n    async makeTransfer2(params) {\n        let self = this\n        let result = {}\n\n        console.info('param ',params)\n        self.datalist.push(params)\n    },\n    async makeTransfer(params) {\n      //直接全局变量给他是不行的\n      //要设置一个self中介\n      let self = this\n      let result = {}\n\n      console.info('param ',params)\n      await axios.request({\n          url: \"Transfer\",\n          data: params,\n          headers:{\n            'Content-type': 'application/x-www-form-urlencoded',\n          },\n          method: \"post\"\n      }).then(function(res) {  //得到res！？？？？\n          console.info(res.data);  //得到控制台的数据\n          result = res.data\n          let retCode = result.output\n          self.datalist.push(params)\n        /*\n        if(retCode[0] != \"0\") {\n            }\n            else {\n                self.datalist.push(params)\n                console.info('333',result.output)\n                return 1\n            }\n            */\n        let form = {}\n        form.ReceiptType = \"transfer\"  //!!!!\n        form.receiptID = self.datalist.length+1\n        form.fromAccount = this.AddContractForm.fromAccount\n        form.toAccount = this.AddContractForm.toAccount\n        form.amount = this.AddContractForm.amount\n        form.prover = 0\n\n        form.financinged = 0\n        form.settled = 0\n        form.transferRecord = []\n        form.leftValue = this.AddContractForm.amount\n        self.datalist.push(form)\n\n        //let flag = false\n        let form1 = {}\n        form1.ReceiptType = \"fresh\"  //!!!!\n        form1.receiptID = self.datalist.length+1\n        form1.fromAccount = self.datalist[this.AddContractForm.receiptID-1].fromAccount\n        form1.toAccount = self.datalist[this.AddContractForm.receiptID-1].toAccount\n        form1.amount = self.datalist[this.AddContractForm.receiptID-1].amount\n        form1.prover = self.datalist[this.AddContractForm.receiptID-1].prover\n\n        form1.financinged = 0\n        form1.settled = 0\n        form1.transferRecord = self.datalist[this.AddContractForm.receiptID-1].transferRecord.push(form.receiptID)\n        form1.leftValue = self.datalist[this.AddContractForm.receiptID-1].amount-this.AddContractForm.amount\n        self.datalist.push(form1)\n                \n        /*\n        if(flag == true){\n          self.datalist.push(form)\n        }*/\n\n        \n      });\n    },  \n\n    //5.0\n    async makeAddContract(params) {\n      //直接全局变量给他是不行的\n      //要设置一个self中介\n      let self = this\n      let result = {}\n      //   let da = {\n      //     contractName: param,\n      //   }\n      console.info('param ',params)\n      await axios.request({\n          url: \"AddContract\",\n          data: params,\n          headers:{\n            'Content-type': 'application/x-www-form-urlencoded',\n\n          },\n          method: \"post\"\n      }).then(function(res) {\n          console.info(res.data);\n          result = res.data\n          let retCode = result.output\n          //发起新合同失败  这部分独有\n          \n            if(retCode = 0) {\n            }\n            else {\n                self.datalist.push(params)\n                /*\n                let form = {}\n                form.ReceiptType = \"new\"  //!!!!\n                form.receiptID = self.datalist.length+1\n                form.fromAccount = this.AddContractForm.fromAccount\n                form.toAccount = this.AddContractForm.toAccount\n                form.amount = this.AddContractForm.amount\n                form.prover = this.AddContractForm.prover\n\n                form.financinged = 0\n                form.settled = 0\n                form.transferRecord = []\n                form.leftValue = this.AddContractForm.amount\n                data:form\n                self.datalist.push(form)\n                */\n                console.info('333',result.output)\n                return 1\n            }\n            \n          /*\n          let form = {}\n          form.ReceiptType = \"new\"  //!!!!\n          form.receiptID = self.datalist.length+1\n          form.fromAccount = this.AddContractForm.fromAccount\n          form.toAccount = this.AddContractForm.toAccount\n          form.amount = this.AddContractForm.amount\n          form.prover = this.AddContractForm.prover\n\n          form.financinged = 0\n          form.settled = 0\n          form.transferRecord = []\n          form.leftValue = this.AddContractForm.amount\n          self.datalist.push(form)\n          */\n          //let flag = false\n          /*\n          for(let i = 0; i < self.datalist.length; i = i +1){\n              self.datalist[i].ReceiptType == form.ReceiptType\n                  flag = true\n                  self.datalist[i].receiptID = form.receiptID\n                  self.datalist[i].fromAccount = form.fromAccount\n                  self.datalist[i].toAccount = form.toAccount\n                  self.datalist[i].amount = form.amount\n                  self.datalist[i].prover = form.prover\n\n                  self.datalist[i].financinged = form.financinged\n                  self.datalist[i].settled = form.settled\n                  self.datalist[i].transferRecord = form.transferRecord\n                  self.datalist[i].leftValue = form.leftValue\n              }\n          }\n          if(flag == false){\n              self.datalist.push(form)\n          }*/\n          \n          // this.list.push({name: 'Asset'})\n        //   self.datalist.push({name: param,contractAddress: result.contractAddress})\n      });\n    },\n\n    async makeFinancing(params) {\n      //直接全局变量给他是不行的\n      //要设置一个self中介\n      let self = this\n      let result = {}\n      //   let da = {\n      //     contractName: param,\n      //   }\n      console.info('param ',params)\n      await axios.request({\n          url: \"Financing\",\n          data: params,\n          headers:{\n            'Content-type': 'application/x-www-form-urlencoded',\n          },\n          method: \"post\"\n      }).then(function(res) {\n          console.info(res.data);\n          result = res.data\n          let retCode = result.output\n          //发起新合同失败  这部分独有\n          \n            if(retCode[0] != 0) {\n            }\n            else {\n                self.datalist.push(params)\n                console.info('333',result.output)\n                return 1\n            }\n          // this.list.push({name: 'Asset'})\n        //   self.datalist.push({name: param,contractAddress: result.contractAddress})\n      });\n    },  \n\n    async makeSettle(params) {\n      //直接全局变量给他是不行的\n      //要设置一个self中介\n      let self = this\n      let result = {}\n      //   let da = {\n      //     contractName: param,\n      //   }\n      console.info('param ',params)\n      await axios.request({\n          url: \"Settle\",\n          data: params,\n          headers:{\n            'Content-type': 'application/x-www-form-urlencoded',\n          },\n          method: \"post\"\n      }).then(function(res) {\n          console.info(res.data);\n          result = res.data\n          let retCode = result.output\n          //发起新合同失败  这部分独有\n          /*\n            if(retCode[0] != \"0\") {\n            }\n            else {\n                self.datalist.push(params)\n                console.info('333',result.output)\n                return 1\n            }\n            */\n          let form1 = {}\n          form1.ReceiptType = \"financing\" \n          form1.receiptID = self.datalist.length+1\n          form1.fromAccount = self.datalist[this.AddContractForm.receiptID-1].fromAccount\n          form1.toAccount = self.datalist[this.AddContractForm.receiptID-1].toAccount\n          form1.amount = self.datalist[this.AddContractForm.receiptID-1].amount\n          form1.prover = self.datalist[this.AddContractForm.receiptID-1].prover\n\n          form1.financinged = self.datalist[this.AddContractForm.receiptID-1].financinged\n          form1.settled = 1\n          form1.transferRecord = self.datalist[this.AddContractForm.receiptID-1].transferRecord\n          form1.leftValue = 0\n          self.datalist.push(form1)\n          // this.list.push({name: 'Asset'})\n        //   self.datalist.push({name: param,contractAddress: result.contractAddress})\n      });\n    },\n\n    //2.0 导致isAddContract为1\n    openAddContract(){\n      this.isAddContract = true\n    },\n    //4.0\n    doAddContract(){\n        let self = this\n        this.$refs.AddContractForm.validate(async (valid) =>{ //检验表单\n        if(valid){\n          //console.info('AddContract form',this.AddContractForm.account, this.AddContractForm.property, this.AddContractForm.credit)\n          let content = {}\n          content.ReceiptType = \"new\"  //!!!!\n          content.receiptID = self.datalist.length+1\n\n          content.fromAccount = this.AddContractForm.fromAccount\n          content.toAccount = this.AddContractForm.toAccount\n          content.prover = this.AddContractForm.prover\n          content.amount = this.AddContractForm.amount\n\n         \n          content.financinged = 0\n          content.settled = 0\n          /*\n          content.transferRecord = {}\n          let t\n          t.content.transferRecord.length=0\n          content.transferRecord.push(t)\n          */\n          content.leftValue = this.AddContractForm.amount\n\n          //content.contract = DEFAULTCONTRCT\n          //content.addr = DEFAULTCONTRACTADDRESS\n          content.func = 'AddContract'\n\n          //5.0\n          this.makeAddContract(content)\n          \n          \n          this.$Message.success('发起新合同成功')\n          this.cancelAddContract()\n        }\n        else {\n          this.$Message.error('请正确填写表单')\n        }\n      })\n      // this.isAddContract = false\n    },\n    cancelAddContract () {\n      // 重置功能添加表单对象\n      this.$refs.AddContractForm.resetFields()\n      this.AddContractForm = {}\n      this.isAddContract = false\n    },\n\n    openFinancing(){\n      this.isFinancing = true\n    },\n    doFinancing(){\n        let self = this\n        this.$refs.FinancingForm.validate(async (valid) =>{ //检验表单\n        if(valid){\n          let content = {}\n          content.ReceiptType = \"financing\" \n          content.receiptID = this.FinancingForm.receiptID\n          //content.receiptID = this.FinancingForm.receiptID\n          content.fromAccount = self.datalist[this.FinancingForm.receiptID-1].fromAccount\n          content.toAccount = self.datalist[this.FinancingForm.receiptID-1].toAccount\n          content.amount = self.datalist[this.FinancingForm.receiptID-1].amount\n          content.prover = self.datalist[this.FinancingForm.receiptID-1].prover\n\n          content.financinged = 1\n          content.settled = self.datalist[this.FinancingForm.receiptID-1].settled\n\n          //content.contract = DEFAULTCONTRCT\n          //content.addr = DEFAULTCONTRACTADDRESS\n          content.func = 'Financing'\n\n          //content.receiptID = this.FinancingForm.receiptID\n          //content.transferRecord = self.datalist[this.FinancingForm.receiptID-1].transferRecord\n          content.leftValue = 0\n\n\n          this.makeFinancing(content)\n          \n          \n          this.$Message.success('单据融资成功')\n          this.cancelFinancing()\n        }\n        else {\n          this.$Message.error('请正确填写表单')\n        }\n      })\n      // this.isFinancing = false\n    },\n    cancelFinancing() {\n      // 重置功能添加表单对象\n      this.$refs.FinancingForm.resetFields()\n      this.FinancingForm = {}\n      this.isFinancing = false\n    },\n\n    openSettle(){\n      this.isSettle = true\n    },\n    doSettle(){\n        let self = this\n        this.$refs.SettleForm.validate(async (valid) =>{ //检验表单\n        if(valid){\n          let content = {}\n          content.receiptID = this.SettleForm.receiptID\n\n          //content.contract = DEFAULTCONTRCT\n          //content.addr = DEFAULTCONTRACTADDRESS\n          content.func = 'Settle'\n\n          this.makeSettle(content)\n          \n          \n          this.$Message.success('结算账款成功')\n          this.cancelSettle()\n        }\n        else {\n          this.$Message.error('请正确填写表单')\n        }\n      })\n    },\n    cancelSettle() {\n      // 重置功能添加表单对象\n      this.$refs.SettleForm.resetFields()\n      this.SettleForm = {}\n      this.isSettle = false\n    },\n\n    //点击Transfer的确认交易后1.0\n    cancelTransfer() {\n      this.$refs.TransferForm.resetFields()\n      this.TransferForm = {}\n      this.isTransfer = false\n    },\n    //打开单据转让\n    openTransfer() {\n        this.isTransfer = true\n    },\n    doTransfer() {\n        let self = this\n        this.$refs.TransferForm.validate(async (valid) =>{ //检验表单\n        if(valid){\n            let content = {}\n            content.ReceiptType = \"transfer\"  //!!!!\n            content.receiptID = self.datalist.length+1\n\n            content.fromAccount = this.TransferForm.fromAccount\n            content.toAccount = this.TransferForm.toAccount\n            content.amount = this.TransferForm.amount\n\n            content.prover = 0\n            content.financinged = 0\n            content.settled = 0\n            //form.transferRecord = []\n            content.leftValue = this.TransferForm.amount\n            \n            //content.contract = DEFAULTCONTRCT\n            //content.addr = DEFAULTCONTRACTADDRESS\n            content.func = 'Transfer'\n\n            this.makeTransfer(content)  //点击Transfer的确认交易后1.1\n            //   this.deploy(this.AddContractForm.name)\n            this.$Message.success('单据转让成功')\n            this.cancelTransfer()\n        }\n        else {\n          this.$Message.error('请正确填写表单')\n        }\n      })\n    }\n    \n  },\n  \n  /*\n  created () {\n    // this.deploy('Asset')\n    this.isRegister = false\n  },\n  */\n  \n};\n",null]}